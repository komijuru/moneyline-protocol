{
  "address": "0x974D2aC07C0eaf27b2178bCec4Ff8AC0385aA9D0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IMoneylineBets.Result",
          "name": "result",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prizePerTicket",
          "type": "uint256"
        }
      ],
      "name": "CloseBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "commissionAmount",
          "type": "uint256"
        }
      ],
      "name": "CommissionPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromIdx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toIdx",
          "type": "uint256"
        }
      ],
      "name": "FinalizeBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InjectBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IMoneylineBets.Result",
          "name": "choice",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromIdx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toIdx",
          "type": "uint256"
        }
      ],
      "name": "InvalidateBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IMoneylineBets.Result",
          "name": "choice",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketCount",
          "type": "uint256"
        }
      ],
      "name": "MakeBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startsAt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endsAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerTicket",
          "type": "uint256"
        }
      ],
      "name": "OpenBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INJECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bets",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "teamA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "teamB",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startsAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endsAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerTicket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizePerTicket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commissionPerTicket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum IMoneylineBets.Result",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "enum IMoneylineBets.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claimBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "enum IMoneylineBets.Result[]",
          "name": "results",
          "type": "uint8[]"
        }
      ],
      "name": "closeBets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLast",
          "type": "bool"
        }
      ],
      "name": "finalizeBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "injectBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum IMoneylineBets.Result",
          "name": "choice",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "fromIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLast",
          "type": "bool"
        }
      ],
      "name": "invalidateBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBetId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum IMoneylineBets.Result",
          "name": "choice",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "ticketCount",
          "type": "uint256"
        }
      ],
      "name": "makeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "code",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "teamA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "teamB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionPerTicket",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMoneylineBets.OpenBetRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "openBets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "viewer",
          "type": "address"
        }
      ],
      "name": "viewBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "teamA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "teamB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizePerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionPerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "injectedAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum IMoneylineBets.Result",
              "name": "result",
              "type": "uint8"
            },
            {
              "internalType": "enum IMoneylineBets.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "winChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "winTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "loseChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "loseTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "drawChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "drawTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "winTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "drawTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loseTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loseTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "drawTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMoneylineBets.BetView",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "viewer",
          "type": "address"
        }
      ],
      "name": "viewBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "teamA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "teamB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizePerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionPerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "injectedAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum IMoneylineBets.Result",
              "name": "result",
              "type": "uint8"
            },
            {
              "internalType": "enum IMoneylineBets.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "winChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "winTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "loseChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "loseTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "drawChoices",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "drawTicketCounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "winTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "drawTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loseTotalTicketCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loseTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "drawTotalSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMoneylineBets.BetView[100]",
          "name": "",
          "type": "tuple[100]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3875d6672ac1330afadf956368552059bd6b282406905726dc76d9ebc3ec95fc",
  "receipt": {
    "to": null,
    "from": "0xA60cd2D169d501cfe9C85d159a4e3A49D17d0963",
    "contractAddress": "0x974D2aC07C0eaf27b2178bCec4Ff8AC0385aA9D0",
    "transactionIndex": 4,
    "gasUsed": "2588646",
    "logsBloom": "0x
    "blockHash": "0x3ff5b47892974e457071e84d0f64cb553c1c0561f6af1b2ad3f1f978321a452d",
    "transactionHash": "0x3875d6672ac1330afadf956368552059bd6b282406905726dc76d9ebc3ec95fc",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8089381,
        "transactionHash": "0x3875d6672ac1330afadf956368552059bd6b282406905726dc76d9ebc3ec95fc",
        "address": "0x974D2aC07C0eaf27b2178bCec4Ff8AC0385aA9D0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a60cd2d169d501cfe9c85d159a4e3a49d17d0963",
          "0x000000000000000000000000a60cd2d169d501cfe9c85d159a4e3a49d17d0963"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x3ff5b47892974e457071e84d0f64cb553c1c0561f6af1b2ad3f1f978321a452d"
      }
    ],
    "blockNumber": 8089381,
    "cumulativeGasUsed": "2877460",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x48277469a140826B50E9B35983e7d6D70076D729"
  ],
  "numDeployments": 14,
  "solcInputHash": "8dd77a7b2f30cb42d4117aced1568a85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizePerTicket\",\"type\":\"uint256\"}],\"name\":\"CloseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"CommissionPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toIdx\",\"type\":\"uint256\"}],\"name\":\"FinalizeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InjectBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toIdx\",\"type\":\"uint256\"}],\"name\":\"InvalidateBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"name\":\"MakeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerTicket\",\"type\":\"uint256\"}],\"name\":\"OpenBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INJECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"enum IMoneylineBets.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IMoneylineBets.Result[]\",\"name\":\"results\",\"type\":\"uint8[]\"}],\"name\":\"closeBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLast\",\"type\":\"bool\"}],\"name\":\"finalizeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"injectBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"choice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fromIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLast\",\"type\":\"bool\"}],\"name\":\"invalidateBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"choice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"name\":\"makeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPerTicket\",\"type\":\"uint256\"}],\"internalType\":\"struct IMoneylineBets.OpenBetRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"openBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"viewer\",\"type\":\"address\"}],\"name\":\"viewBet\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"enum IMoneylineBets.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"winChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"loseChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"loseTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"drawChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"drawTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"winTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loseTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loseTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct IMoneylineBets.BetView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"viewer\",\"type\":\"address\"}],\"name\":\"viewBets\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IMoneylineBets.Result\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"enum IMoneylineBets.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"winChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"loseChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"loseTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"drawChoices\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"drawTicketCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"winTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loseTotalTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loseTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTotalSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct IMoneylineBets.BetView[100]\",\"name\":\"\",\"type\":\"tuple[100]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoneylineBets/MoneylineBets.sol\":\"MoneylineBets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/MoneylineBets/IMoneylineBets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IMoneylineBets {\\n    enum Result {\\n        NONE, WIN, DRAW, LOSE, CANCEL\\n    }\\n\\n    enum Status {\\n        NONE, OPEN, CLOSED, FINALIZED, INVALIDATED\\n    }\\n\\n    struct Bet {\\n        bytes32 code;\\n        uint256 id;\\n        string teamA;\\n        string teamB;\\n        uint256 startsAt;\\n        uint256 endsAt;\\n        uint256 pricePerTicket;\\n        uint256 prizePerTicket;\\n        uint256 commissionPerTicket;\\n        uint256 injectedAmount;\\n        Result result;\\n        Status status;\\n        mapping(Result => address[]) choices;\\n        mapping(Result => uint256[]) ticketCounts;\\n        mapping(Result => uint256) totalTicketCount;\\n        mapping(address => uint256) claimable;\\n    }\\n\\n    struct BetView {\\n        bytes32 code;\\n        uint256 id;\\n        string teamA;\\n        string teamB;\\n        uint256 startsAt;\\n        uint256 endsAt;\\n        uint256 pricePerTicket;\\n        uint256 prizePerTicket;\\n        uint256 commissionPerTicket;\\n        uint256 injectedAmount;\\n        Result result;\\n        Status status;\\n        address[] winChoices;\\n        uint256[] winTicketCounts;\\n        address[] loseChoices;\\n        uint256[] loseTicketCounts;\\n        address[] drawChoices;\\n        uint256[] drawTicketCounts;\\n        uint256 winTotalTicketCount;\\n        uint256 drawTotalTicketCount;\\n        uint256 loseTotalTicketCount;\\n        uint256 winTotalSize;\\n        uint256 loseTotalSize;\\n        uint256 drawTotalSize;\\n        uint256 claimable;\\n    }\\n\\n    struct OpenBetRequest {\\n        string code;\\n        string teamA;\\n        string teamB;\\n        uint256 startsAt;\\n        uint256 endsAt;\\n        uint256 pricePerTicket;\\n        uint256 commissionPerTicket;\\n    }\\n\\n    function makeBet(uint256 id, Result choice, uint256 ticketCount) external payable;\\n\\n    function claimBet(uint256 id) external;\\n\\n    function openBets(\\n        OpenBetRequest[] calldata requests\\n    ) external;\\n\\n    function closeBets(\\n        uint256[] calldata ids,\\n        Result[] calldata results\\n    ) external;\\n\\n    function finalizeBet(uint256 id, uint256 fromIdx, uint256 limit, bool isLast) external;\\n\\n    function invalidateBet(uint256 id, Result choice, uint256 fromIdx, uint256 limit, bool isLast) external;\\n\\n    function injectBet(uint256 id) external payable;\\n\\n    function viewBets(uint256 fromId, address viewer) external view returns (BetView[100] memory);\\n}\",\"keccak256\":\"0xb6615a98ffccd1936bf74058710765927cb3a4015aa37d30506c264b042ac368\",\"license\":\"MIT\"},\"contracts/MoneylineBets/MoneylineBets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./IMoneylineBets.sol\\\";\\n\\ncontract MoneylineBets is IMoneylineBets, AccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant INJECTOR_ROLE = keccak256(\\\"INJECTOR_ROLE\\\");\\n\\n    address payable public immutable treasury;\\n\\n    uint256 public latestBetId;\\n    mapping(uint256 => Bet) public bets;\\n\\n    event ClaimBet(address indexed from, uint256 indexed amount);\\n    event MakeBet(address indexed from, Result indexed choice, uint256 indexed ticketCount);\\n    event CommissionPayment(address indexed from, uint256 indexed commissionAmount);\\n    event OpenBet(uint256 indexed id, uint256 indexed startsAt, uint256 indexed endsAt, uint256 pricePerTicket);\\n    event CloseBet(uint256 indexed id, Result indexed result, uint256 indexed prizePerTicket);\\n    event FinalizeBet(uint256 indexed id, uint256 indexed fromIdx, uint256 indexed toIdx);\\n    event InvalidateBet(uint256 indexed id, Result choice, uint256 indexed fromIdx, uint256 indexed toIdx);\\n    event InjectBet(uint256 indexed id, uint256 indexed amount);\\n\\n    constructor(address payable _treasury) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        treasury = _treasury;\\n    }\\n\\n    function makeBet(uint256 id, Result choice, uint256 ticketCount) external payable {\\n        Bet storage bet = bets[id];\\n        require(choice != Result.NONE, \\\"Cannot pick None\\\");\\n        require(bet.status == Status.OPEN, \\\"Not open\\\");\\n        require(bet.startsAt <= block.timestamp && block.timestamp <= bet.endsAt, \\\"Betting period is over\\\");\\n        require(ticketCount * bet.pricePerTicket == msg.value, \\\"Wrong amount of ether paid\\\");\\n\\n        bet.choices[choice].push(msg.sender);\\n        bet.ticketCounts[choice].push(ticketCount);\\n        bet.totalTicketCount[choice] += ticketCount;\\n\\n        if (bet.commissionPerTicket > 0) {\\n            (bool sent,) = treasury.call{value : ticketCount * bet.commissionPerTicket}(\\\"\\\");\\n            require(sent, \\\"Failed ether transfer\\\");\\n            emit CommissionPayment(msg.sender, ticketCount * bet.commissionPerTicket);\\n        }\\n        emit MakeBet(msg.sender, choice, ticketCount);\\n    }\\n\\n    function claimBet(uint256 id) external {\\n        Bet storage bet = bets[id];\\n        require(bet.status == Status.FINALIZED, \\\"Not finalized\\\");\\n        require(bet.claimable[msg.sender] > 0, \\\"Nothing to claim\\\");\\n        uint256 amount = bet.claimable[msg.sender];\\n        (bool sent,) = payable(msg.sender).call{value : amount}(\\\"\\\");\\n        require(sent, \\\"Failed ether transfer\\\");\\n        bet.claimable[msg.sender] = 0;\\n        emit ClaimBet(msg.sender, amount);\\n    }\\n\\n    // @dev only operator\\n    function openBets(\\n        OpenBetRequest[] calldata requests\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            OpenBetRequest memory request = requests[i];\\n            uint256 id = ++latestBetId;\\n            Bet storage bet = bets[id];\\n            require(\\n                keccak256(abi.encodePacked(request.teamA)) != \\\"\\\"\\n                && keccak256(abi.encodePacked(request.teamB)) != \\\"\\\"\\n                && keccak256(abi.encodePacked(request.teamA)) != keccak256(abi.encodePacked(request.teamB))\\n                && request.startsAt < request.endsAt\\n                && request.pricePerTicket > request.commissionPerTicket,\\n                \\\"Invalid request\\\"\\n            );\\n\\n            bet.code = keccak256(abi.encodePacked(request.code));\\n            bet.id = id;\\n            bet.teamA = request.teamA;\\n            bet.teamB = request.teamB;\\n            bet.startsAt = request.startsAt;\\n            bet.endsAt = request.endsAt;\\n            bet.pricePerTicket = request.pricePerTicket;\\n            bet.commissionPerTicket = request.commissionPerTicket;\\n            bet.prizePerTicket = 0;\\n            bet.result = Result.NONE;\\n            bet.status = Status.OPEN;\\n            emit OpenBet(id, request.startsAt, request.endsAt, request.pricePerTicket);\\n        }\\n    }\\n\\n    // @dev only operator\\n    function closeBets(\\n        uint256[] calldata ids,\\n        Result[] calldata results\\n    ) external onlyRole(OPERATOR_ROLE) {\\n        require(ids.length == results.length, \\\"Invalid input length\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            Result result = results[i];\\n            Bet storage bet = bets[id];\\n            require(bet.status == Status.OPEN, \\\"Not open\\\");\\n            require(bet.result == Result.NONE, \\\"Cannot pick None\\\");\\n\\n            bet.result = result;\\n            uint256 totalPrize = bet.injectedAmount\\n            + bet.totalTicketCount[Result.WIN] * (bet.pricePerTicket - bet.commissionPerTicket)\\n            + bet.totalTicketCount[Result.LOSE] * (bet.pricePerTicket - bet.commissionPerTicket)\\n            + bet.totalTicketCount[Result.DRAW] * (bet.pricePerTicket - bet.commissionPerTicket);\\n\\n            if (bet.choices[bet.result].length != 0 && result != Result.CANCEL) {\\n                bet.prizePerTicket = totalPrize / bet.totalTicketCount[bet.result];\\n            }\\n            bet.status = Status.CLOSED;\\n\\n            emit CloseBet(id, result, bet.prizePerTicket);\\n        }\\n    }\\n\\n    // @dev only operator\\n    function invalidateBet(uint256 id, Result choice, uint256 fromIdx, uint256 limit, bool isLast) external onlyRole(OPERATOR_ROLE) {\\n        Bet storage bet = bets[id];\\n        require(bet.status == Status.CLOSED && bet.result == Result.CANCEL, \\\"Already finalized or not canceled\\\");\\n\\n        uint256 toIdx = fromIdx + limit;\\n        if (toIdx > bet.choices[choice].length) {\\n            toIdx = bet.choices[choice].length;\\n        }\\n        for (uint256 i = fromIdx; i < toIdx; i++) {\\n            bet.claimable[bet.choices[choice][i]] += bet.pricePerTicket * bet.ticketCounts[choice][i];\\n        }\\n\\n        if (isLast) {\\n            bet.status = Status.FINALIZED;\\n        }\\n\\n        emit InvalidateBet(id, choice, fromIdx, toIdx);\\n    }\\n\\n    // @dev only operator\\n    function finalizeBet(uint256 id, uint256 fromIdx, uint256 limit, bool isLast) external onlyRole(OPERATOR_ROLE) {\\n        Bet storage bet = bets[id];\\n        require(bet.status == Status.CLOSED, \\\"Not closed\\\");\\n\\n        uint256 toIdx = fromIdx + limit;\\n        if (toIdx > bet.choices[bet.result].length) {\\n            toIdx = bet.choices[bet.result].length;\\n        }\\n        for (uint256 i = fromIdx; i < toIdx; i++) {\\n            bet.claimable[bet.choices[bet.result][i]] += bet.ticketCounts[bet.result][i] * bet.prizePerTicket;\\n        }\\n\\n        if (isLast) {\\n            bet.status = Status.FINALIZED;\\n        }\\n\\n        emit FinalizeBet(id, fromIdx, toIdx);\\n    }\\n\\n    // @dev only injector\\n    function injectBet(uint256 id) external payable onlyRole(INJECTOR_ROLE) {\\n        Bet storage bet = bets[id];\\n        require(bet.status == Status.OPEN || bet.status == Status.CLOSED, \\\"Not open or closed\\\");\\n\\n        bet.injectedAmount = msg.value;\\n\\n        emit InjectBet(id, msg.value);\\n    }\\n\\n    function viewBet(uint256 id, address viewer) public view returns (BetView memory) {\\n        Bet storage bet = bets[id];\\n        return BetView({\\n        code : bet.code,\\n        id : bet.id,\\n        teamA : bet.teamA,\\n        teamB : bet.teamB,\\n        startsAt : bet.startsAt,\\n        endsAt : bet.endsAt,\\n        pricePerTicket : bet.pricePerTicket,\\n        prizePerTicket : bet.prizePerTicket,\\n        commissionPerTicket : bet.commissionPerTicket,\\n        injectedAmount : bet.injectedAmount,\\n        result : bet.result,\\n        status : bet.status,\\n        winChoices : bet.choices[Result.WIN],\\n        loseChoices : bet.choices[Result.LOSE],\\n        drawChoices : bet.choices[Result.DRAW],\\n        winTicketCounts : bet.ticketCounts[Result.WIN],\\n        loseTicketCounts : bet.ticketCounts[Result.LOSE],\\n        drawTicketCounts : bet.ticketCounts[Result.DRAW],\\n        winTotalTicketCount : bet.totalTicketCount[Result.WIN],\\n        drawTotalTicketCount : bet.totalTicketCount[Result.LOSE],\\n        loseTotalTicketCount : bet.totalTicketCount[Result.DRAW],\\n        winTotalSize : bet.totalTicketCount[Result.WIN] * (bet.pricePerTicket - bet.commissionPerTicket),\\n        loseTotalSize : bet.totalTicketCount[Result.LOSE] * (bet.pricePerTicket - bet.commissionPerTicket),\\n        drawTotalSize : bet.totalTicketCount[Result.DRAW] * (bet.pricePerTicket - bet.commissionPerTicket),\\n        claimable : bet.claimable[viewer]\\n        });\\n    }\\n\\n    function viewBets(uint256 fromId, address viewer) external view returns (BetView[100] memory) {\\n        BetView[100] memory betViews;\\n        for (uint256 i = 0; i < 100; i++) {\\n            betViews[i] = viewBet(fromId + i, viewer);\\n        }\\n        return betViews;\\n    }\\n}\\n\",\"keccak256\":\"0xd77a49f41fad41da175808ce8e1c81354e86ad216c1c3defea15dc38d04f46bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1719,
        "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
        "label": "latestBetId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1724,
        "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
        "label": "bets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Bet)1548_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Result)1494": {
        "encoding": "inplace",
        "label": "enum IMoneylineBets.Result",
        "numberOfBytes": "1"
      },
      "t_enum(Status)1500": {
        "encoding": "inplace",
        "label": "enum IMoneylineBets.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_enum(Result)1494,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Result)1494",
        "label": "mapping(enum IMoneylineBets.Result => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(Result)1494,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Result)1494",
        "label": "mapping(enum IMoneylineBets.Result => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(Result)1494,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Result)1494",
        "label": "mapping(enum IMoneylineBets.Result => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bet)1548_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMoneylineBets.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)1548_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bet)1548_storage": {
        "encoding": "inplace",
        "label": "struct IMoneylineBets.Bet",
        "members": [
          {
            "astId": 1502,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "code",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1504,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1506,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "teamA",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1508,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "teamB",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1510,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "startsAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1512,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "endsAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1514,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "pricePerTicket",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1516,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "prizePerTicket",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1518,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "commissionPerTicket",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1520,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "injectedAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1523,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "result",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(Result)1494"
          },
          {
            "astId": 1526,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "status",
            "offset": 1,
            "slot": "10",
            "type": "t_enum(Status)1500"
          },
          {
            "astId": 1532,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "choices",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_enum(Result)1494,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 1538,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "ticketCounts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_enum(Result)1494,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 1543,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "totalTicketCount",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_enum(Result)1494,t_uint256)"
          },
          {
            "astId": 1547,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "claimable",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MoneylineBets/MoneylineBets.sol:MoneylineBets",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}